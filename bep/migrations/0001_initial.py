# Generated by Django 5.1.5 on 2025-02-28 18:18

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import django_advance_thumbnail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Archive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bep_archive',
            },
        ),
        migrations.CreateModel(
            name='Diocese',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bep_diocese',
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bep_format',
            },
        ),
        migrations.CreateModel(
            name='Monarch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bep_monarch',
            },
        ),
        migrations.CreateModel(
            name='Nation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bep_nation',
            },
        ),
        migrations.CreateModel(
            name='PrintSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField()),
                ('author', models.CharField(blank=True)),
                ('date', models.CharField(blank=True)),
                ('publisher', models.CharField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bep_print_source',
            },
        ),
        migrations.CreateModel(
            name='SourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'source categories',
                'db_table': 'bep_source_category',
            },
        ),
        migrations.CreateModel(
            name='TransactionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'transaction categories',
                'db_table': 'bep_transaction_category',
            },
        ),
        migrations.CreateModel(
            name='Archdeaconry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('diocese', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archdeaconries', to='bep.diocese')),
            ],
            options={
                'verbose_name_plural': 'archdeaconries and courts',
                'db_table': 'bep_archdeaconry',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True)),
                ('uniform_title', models.CharField(blank=True)),
                ('variant_titles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), blank=True, size=None)),
                ('author', models.CharField(blank=True)),
                ('imprint', models.TextField(blank=True)),
                ('variant_imprint', models.TextField(blank=True, verbose_name='Imprint, Modern English')),
                ('date', models.CharField(blank=True)),
                ('estc', models.CharField(blank=True)),
                ('physical_description', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True, verbose_name='Private Notes')),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('search_vector', models.GeneratedField(db_persist=True, expression=django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.SearchVector('title', config='english', weight='A'), '||', django.contrib.postgres.search.SearchVector('uniform_title', config='english', weight='B'), django.contrib.postgres.search.SearchConfig('english')), '||', django.contrib.postgres.search.SearchVector('author', config='english', weight='A'), django.contrib.postgres.search.SearchConfig('english')), '||', django.contrib.postgres.search.SearchVector('imprint', config='english', weight='C'), django.contrib.postgres.search.SearchConfig('english')), '||', django.contrib.postgres.search.SearchVector('variant_imprint', config='english', weight='D'), django.contrib.postgres.search.SearchConfig('english')), '||', django.contrib.postgres.search.SearchVector('description', config='english', weight='C'), django.contrib.postgres.search.SearchConfig('english')), '||', django.contrib.postgres.search.SearchVector('date', config='english', weight='C'), django.contrib.postgres.search.SearchConfig('english')), output_field=django.contrib.postgres.search.SearchVectorField())),
                ('format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='bep.format')),
                ('monarch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='bep.monarch')),
            ],
            options={
                'db_table': 'bep_book',
            },
        ),
        migrations.CreateModel(
            name='Holding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('written_date', models.CharField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('archive', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='holdings', to='bep.archive')),
                ('books', models.ManyToManyField(blank=True, related_name='holdings', to='bep.book')),
            ],
            options={
                'verbose_name': 'surviving text',
                'db_table': 'bep_holding',
            },
        ),
        migrations.CreateModel(
            name='HoldingImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(height_field='image_height', help_text='Please use <a class="text-primary-500" href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types" target="_blank">standard web image types</a>. PNG, JPEG, and WebP are recommended.', upload_to='images/', width_field='image_width')),
                ('image_width', models.IntegerField(blank=True, null=True)),
                ('image_height', models.IntegerField(blank=True, null=True)),
                ('thumbnail', django_advance_thumbnail.fields.AdvanceThumbnailField(blank=True, null=True, upload_to='thumbnails/')),
                ('description', models.TextField(blank=True)),
                ('license', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('holding', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bep.holding')),
            ],
            options={
                'verbose_name': 'surviving text image',
                'db_table': 'bep_holding_image',
            },
        ),
        migrations.CreateModel(
            name='Injunction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField()),
                ('uniform_title', models.CharField(blank=True)),
                ('variant_titles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), blank=True, size=None)),
                ('author', models.CharField(blank=True)),
                ('imprint', models.TextField(blank=True)),
                ('variant_imprint', models.TextField(blank=True, verbose_name='Imprint, Modern English')),
                ('estc', models.CharField(blank=True)),
                ('date', models.CharField(blank=True)),
                ('physical_description', models.TextField(blank=True)),
                ('transcription', models.TextField(blank=True)),
                ('modern_transcription', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('archdeaconry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='injunctions', to='bep.archdeaconry')),
                ('diocese', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='injunctions', to='bep.diocese')),
                ('monarch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='injunctions', to='bep.monarch')),
                ('nation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='injunctions', to='bep.nation')),
            ],
            options={
                'db_table': 'bep_injunction',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_number', models.CharField(blank=True)),
                ('transcription', models.TextField()),
                ('modifications', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('written_date', models.CharField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('books', models.ManyToManyField(blank=True, related_name='inventories', to='bep.book')),
                ('injunction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventories', to='bep.injunction')),
            ],
            options={
                'verbose_name_plural': 'inventories',
                'db_table': 'bep_inventory',
            },
        ),
        migrations.CreateModel(
            name='InventoryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(height_field='image_height', help_text='Please use <a class="text-primary-500" href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types" target="_blank">standard web image types</a>. PNG, JPEG, and WebP are recommended.', upload_to='images/', width_field='image_width')),
                ('image_width', models.IntegerField(blank=True, null=True)),
                ('image_height', models.IntegerField(blank=True, null=True)),
                ('thumbnail', django_advance_thumbnail.fields.AdvanceThumbnailField(blank=True, null=True, upload_to='thumbnails/')),
                ('description', models.TextField(blank=True)),
                ('license', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('inventory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bep.inventory')),
            ],
            options={
                'db_table': 'bep_inventory_image',
            },
        ),
        migrations.CreateModel(
            name='ManuscriptSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('call_number', models.CharField(blank=True)),
                ('label', models.CharField()),
                ('description', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('archive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_sources', to='bep.archive')),
                ('source_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_sources', to='bep.sourcecategory')),
            ],
            options={
                'db_table': 'bep_manuscript_source',
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='manuscript_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventories', to='bep.manuscriptsource'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='monarch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventories', to='bep.monarch'),
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('nation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counties', to='bep.nation')),
            ],
            options={
                'verbose_name_plural': 'counties',
                'db_table': 'bep_county',
            },
        ),
        migrations.CreateModel(
            name='Parish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('address', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('search_vector', models.GeneratedField(db_persist=True, expression=django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.CombinedSearchVector(django.contrib.postgres.search.SearchVector('label', config='english', weight='A'), '||', django.contrib.postgres.search.SearchVector('description', config='english', weight='B'), django.contrib.postgres.search.SearchConfig('english')), '||', django.contrib.postgres.search.SearchVector('address', config='english', weight='C'), django.contrib.postgres.search.SearchConfig('english')), output_field=django.contrib.postgres.search.SearchVectorField())),
                ('archdeaconry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parishes', to='bep.archdeaconry')),
            ],
            options={
                'verbose_name_plural': 'parishes',
                'db_table': 'bep_parish',
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='parish',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to='bep.parish'),
        ),
        migrations.AddField(
            model_name='holding',
            name='parish',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='bep.parish'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='print_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventories', to='bep.printsource'),
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('nation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provinces', to='bep.nation')),
            ],
            options={
                'db_table': 'bep_province',
            },
        ),
        migrations.AddField(
            model_name='injunction',
            name='province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='injunctions', to='bep.province'),
        ),
        migrations.AddField(
            model_name='diocese',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dioceses', to='bep.province'),
        ),
        migrations.AddField(
            model_name='printsource',
            name='source_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='print_sources', to='bep.sourcecategory'),
        ),
        migrations.CreateModel(
            name='Town',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('in_london', models.BooleanField()),
                ('links', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, size=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='towns', to='bep.county')),
            ],
            options={
                'db_table': 'bep_town',
            },
        ),
        migrations.AddField(
            model_name='parish',
            name='town',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parishes', to='bep.town'),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(blank=True, null=True)),
                ('shipping', models.IntegerField(blank=True, null=True)),
                ('copies', models.IntegerField(blank=True, null=True)),
                ('location', models.CharField(blank=True)),
                ('page', models.CharField(blank=True)),
                ('transcription', models.TextField(blank=True)),
                ('modern_transcription', models.TextField(blank=True, verbose_name='Modern English')),
                ('public_notes', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('written_date', models.CharField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('books', models.ManyToManyField(blank=True, related_name='transactions', to='bep.book')),
                ('injunction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='bep.injunction')),
                ('manuscript_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='bep.manuscriptsource')),
                ('monarch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='bep.monarch')),
                ('parish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='bep.parish')),
                ('print_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='bep.printsource')),
                ('transaction_categories', models.ManyToManyField(blank=True, related_name='transactions', to='bep.transactioncategory')),
            ],
            options={
                'db_table': 'bep_transaction',
            },
        ),
        migrations.AddIndex(
            model_name='book',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='bep_book_search__32c3ed_gin'),
        ),
        migrations.AddIndex(
            model_name='parish',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='bep_parish_search__0ef3c2_gin'),
        ),
    ]
